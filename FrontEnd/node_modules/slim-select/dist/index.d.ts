import Config from './config';
import Select from './select';
import Data, { dataArray, option } from './data';
import Slim from './slim';
interface constructor {
    select: string | Element;
    data?: dataArray;
    showSearch?: boolean;
    searchPlaceholder?: string;
    searchText?: string;
    searchingText?: string;
    searchHighlight?: boolean;
    closeOnSelect?: boolean;
    showContent?: string;
    placeholder?: string;
    allowDeselect?: boolean;
    isEnabled?: boolean;
    valuesUseText?: boolean;
    showOptionTooltips?: boolean;
    limit?: number;
    ajax?: Function;
    addable?: Function;
    beforeOnChange?: Function;
    onChange?: Function;
    beforeOpen?: Function;
    afterOpen?: Function;
    beforeClose?: Function;
    afterClose?: Function;
}
export default class SlimSelect {
    config: Config;
    select: Select;
    data: Data;
    slim: Slim;
    ajax: Function | null;
    addable: Function | null;
    beforeOnChange: Function | null;
    onChange: Function | null;
    beforeOpen: Function | null;
    afterOpen: Function | null;
    beforeClose: Function | null;
    afterClose: Function | null;
    constructor(info: constructor);
    validate(info: constructor): HTMLSelectElement;
    selected(): string | string[];
    set(value: string | string[], type?: string, close?: boolean, render?: boolean): void;
    setSelected(value: string | string[], type?: string, close?: boolean, render?: boolean): void;
    setData(data: dataArray): void;
    addData(data: option): void;
    open(): void;
    close(): void;
    moveContentAbove(): void;
    moveContentBelow(): void;
    enable(): void;
    disable(): void;
    search(value: string): void;
    setSearchText(text: string): void;
    render(): void;
    destroy(id?: string | null): void;
}
export {};
